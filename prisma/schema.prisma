generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id          String    @id @default(uuid())
  userId      String    @unique
  fullName    String
  email       String    @unique
  phone       String?
  address     String?
  birthdate   DateTime?
  paymentInfo Json?
  preferences Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  role        UserRole  @default(USER)
  bookings    Booking[]
}

model Airport {
  id         String   @id @default(uuid())
  code       String   @unique
  name       String
  city       String
  country    String
  timezone   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  arrivals   Flight[] @relation("arrival")
  departures Flight[] @relation("departure")
}

model Flight {
  id            String       @id @default(uuid())
  flightNumber  String
  airline       String
  aircraftType  String
  departureTime DateTime
  arrivalTime   DateTime
  duration      Int
  originId      String
  destinationId String
  basePrice     Float
  totalSeats    Json
  status        FlightStatus @default(Scheduled)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  bookings      Booking[]
  destination   Airport      @relation("arrival", fields: [destinationId], references: [id])
  origin        Airport      @relation("departure", fields: [originId], references: [id])
  seats         Seat[]
  seatLocks     SeatLock[]
}

model Seat {
  id         String     @id @default(uuid())
  flightId   String
  seatNumber String
  cabin      CabinClass
  position   Json
  isBlocked  Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  flight     Flight     @relation(fields: [flightId], references: [id])
  seatLocks  SeatLock[]
  bookings   Booking[]  @relation("bookedSeats")

  @@unique([flightId, seatNumber])
}

model Booking {
  id                 String        @id @default(uuid())
  bookingReference   String        @unique
  userProfileId      String
  flightId           String
  passengerDetails   Json
  selectedCabin      CabinClass
  status             BookingStatus @default(Pending)
  totalAmount        Float
  paymentInfo        Json?
  cancellationReason String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  confirmedAt        DateTime?
  cancelledAt        DateTime?
  flight             Flight        @relation(fields: [flightId], references: [id])
  userProfile        UserProfile   @relation(fields: [userProfileId], references: [id])
  bookedSeats        Seat[]        @relation("bookedSeats")
}

model SeatLock {
  id        String         @id @default(uuid())
  flightId  String
  seatId    String
  sessionId String
  expiresAt DateTime
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  status    SeatLockStatus @default(Active)
  flight    Flight         @relation(fields: [flightId], references: [id])
  seat      Seat           @relation(fields: [seatId], references: [id])
}

enum UserRole {
  USER
  ADMIN
}

enum CabinClass {
  Economy
  PremiumEconomy
  Business
  First
}

enum FlightStatus {
  Scheduled
  Boarding
  InAir
  Landed
  Delayed
  Cancelled
}

enum SeatLockStatus {
  Active
  Released
  Expired
}

enum BookingStatus {
  Pending
  AwaitingPayment
  Confirmed
  Cancelled
}
